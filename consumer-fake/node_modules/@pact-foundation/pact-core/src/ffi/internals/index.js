"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.libName = void 0;
var PLATFORM_LOOKUP = {
    linux: 'linux',
    darwin: 'osx',
    win32: 'windows',
};
var LIBNAME_PREFIX_LOOKUP = {
    linux: 'lib',
    darwin: 'lib',
    win32: '',
};
var ARCH_LOOKUP = { x64: 'x86_64', arm64: 'aarch64-apple-darwin' };
var EXTENSION_LOOKUP = {
    'osx-x86_64': 'dylib',
    'osx-aarch64-apple-darwin': 'dylib',
    'linux-x86_64': 'so',
    'windows-x86_64': 'dll',
};
var libName = function (library, version, processArch, processPlatform) {
    if (processArch === void 0) { processArch = process.arch; }
    if (processPlatform === void 0) { processPlatform = process.platform; }
    var arch = ARCH_LOOKUP[processArch];
    var platform = PLATFORM_LOOKUP[processPlatform];
    if (!arch || !platform) {
        throw new Error("Pact does not currently support the operating system and architecture combination '" + processPlatform + "/" + processArch + "'");
    }
    var target = platform + "-" + arch;
    var extension = EXTENSION_LOOKUP[target];
    if (!extension) {
        throw new Error("Pact doesn't know what extension to use for the libraries in the architecture combination '" + target + "'");
    }
    var libnamePrefix = LIBNAME_PREFIX_LOOKUP[processPlatform];
    if (libnamePrefix === undefined) {
        throw new Error("Pact doesn't know what prefix to use for the libraries on '" + processPlatform + "'");
    }
    return version + "-" + libnamePrefix + library + "-" + target + "." + extension;
};
exports.libName = libName;
//# sourceMappingURL=index.js.map