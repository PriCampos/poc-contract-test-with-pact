"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logCrashAndThrow = exports.logErrorAndThrow = exports.verboseIsImplied = exports.getLogLevel = exports.setLogLevel = exports.DEFAULT_LOG_LEVEL = void 0;
var crashMessage_1 = require("./crashMessage");
var pino_1 = require("./pino");
var pkg = require('../../package.json');
var logContext = "pact-core@" + pkg.version;
var currentLogLevel = 'info';
var logger = pino_1.createLogger(currentLogLevel);
exports.DEFAULT_LOG_LEVEL = 'info';
var setLogLevel = function (level) {
    if (level === void 0) { level = 'info'; }
    currentLogLevel = level;
    logger = pino_1.createLogger(currentLogLevel);
};
exports.setLogLevel = setLogLevel;
var getLogLevel = function () { return currentLogLevel; };
exports.getLogLevel = getLogLevel;
var verboseIsImplied = function () {
    return currentLogLevel === 'trace' || currentLogLevel === 'debug';
};
exports.verboseIsImplied = verboseIsImplied;
var addContext = function (context, message) {
    return context + ": " + message;
};
var logFunctions = {
    pactCrash: function (message, context) {
        if (context === void 0) { context = logContext; }
        return logger.error(addContext(context, crashMessage_1.pactCrashMessage(message)));
    },
    error: function (message, context) {
        if (context === void 0) { context = logContext; }
        return logger.error(addContext(context, message));
    },
    warn: function (message, context) {
        if (context === void 0) { context = logContext; }
        return logger.warn(addContext(context, message));
    },
    info: function (message, context) {
        if (context === void 0) { context = logContext; }
        return logger.info(addContext(context, message));
    },
    debug: function (message, context) {
        if (context === void 0) { context = logContext; }
        return logger.debug(addContext(context, message));
    },
    trace: function (message, context) {
        if (context === void 0) { context = logContext; }
        return logger.trace(addContext(context, message));
    },
};
var logErrorAndThrow = function (message, context) {
    logger.error(message, context);
    throw new Error(message);
};
exports.logErrorAndThrow = logErrorAndThrow;
var logCrashAndThrow = function (message, context) {
    logFunctions.pactCrash(message, context);
    throw new Error(message);
};
exports.logCrashAndThrow = logCrashAndThrow;
exports.default = logFunctions;
//# sourceMappingURL=index.js.map