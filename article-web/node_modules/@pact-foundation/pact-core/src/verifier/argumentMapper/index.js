"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.argumentMapper = void 0;
var logger_1 = require("../../logger");
var arguments_1 = require("./arguments");
var argumentMapper = function (options) {
    return Object.keys(options)
        .filter(function (k) {
        var ignoreCondition = arguments_1.ignoreOptionCombinations[k];
        if (ignoreCondition !== undefined) {
            logger_1.default.trace("The argument mapper has an ignored combination for '" + k + "'");
            if (ignoreCondition.ifNotSet &&
                options[ignoreCondition.ifNotSet] === undefined) {
                logger_1.default.warn("Ignoring option '" + k + "' because it is invalid without '" + ignoreCondition.ifNotSet + "' also being set. This may indicate an error in your configuration");
                return false;
            }
            logger_1.default.trace("But it was not ignored: '" + k + "'");
        }
        return true;
    })
        .map(function (key) {
        var thisMapping = arguments_1.argMapping[key];
        var thisValue = options[key];
        if (!thisMapping) {
            if (!arguments_1.ignoredArguments.includes(key)) {
                logger_1.default.error("Pact-core is ignoring unknown option '" + key + "'");
            }
            return [];
        }
        if (thisValue === undefined) {
            logger_1.default.warn("The Verifier option '" + key + "' was was explicitly set to undefined and will be ignored. This may indicate an error in your config. Remove the option entirely to prevent this warning");
            return [];
        }
        if ('warningMessage' in thisMapping) {
            logger_1.default.warn(thisMapping.warningMessage);
            return [];
        }
        if ('arg' in thisMapping) {
            switch (thisMapping.mapper) {
                case 'string':
                    return [thisMapping.arg, "" + thisValue];
                case 'flag':
                    return thisValue ? [thisMapping.arg] : [];
                default:
                    logger_1.default.pactCrash("Option mapper for '" + key + "' maps to '" + thisMapping.arg + "' with unknown mapper type '" + thisMapping.mapper + "'");
                    return [];
            }
        }
        if (typeof thisMapping === 'function') {
            return thisMapping(thisValue);
        }
        logger_1.default.pactCrash("The option mapper completely failed to find a mapping for '" + key + "'.");
        return [];
    })
        .reduce(function (acc, current) { return __spreadArray(__spreadArray([], acc), current); }, []);
};
exports.argumentMapper = argumentMapper;
//# sourceMappingURL=index.js.map